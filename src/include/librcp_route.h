/*
 * Copyright (C) 2012-2013 RCP100 Team (rcpteam@yahoo.com)
 *
 * This file is part of RCP100 project
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/
#ifndef LIBRCP_ROUTE
#define LIBRCP_ROUTE
#ifndef LIBRCP_H
#include <stdint.h>
#endif

#ifdef __cplusplus
extern "C" {
#endif

#define RCP_ROUTE_DISTANCE_CONNECTED 0
#define RCP_ROUTE_DISTANCE_STATIC 1
#define RCP_ROUTE_DISTANCE_RIP 120
#define RCP_ROUTE_DISTANCE_OSPF 110

#define RCP_RIP_KERNEL_PROTO 200
#define RCP_OSPF_KERNEL_PROTO 201
#define RCP_OSPF_IA_KERNEL_PROTO 202
#define RCP_OSPF_E1_KERNEL_PROTO 203
#define RCP_OSPF_E2_KERNEL_PROTO 204

typedef enum {
	RCP_ROUTE_RIP_NETWORK = 0,
	RCP_ROUTE_CONNECTED,
	RCP_ROUTE_STATIC,
	RCP_ROUTE_BLACKHOLE,
	RCP_ROUTE_RIP,
	RCP_ROUTE_OSPF,		// ospf intra-area
	RCP_ROUTE_OSPF_IA,	// ospf inter-area
	RCP_ROUTE_OSPF_E1,	// ospf e1
	RCP_ROUTE_OSPF_E2,	// ospf e2
	RCP_ROUTE_OSPF_BLACKHOLE,	// blackhole route generated by ospf during summarization
	RCP_ROUTE_CONNECTED_SUBNETS,	// virtual loopback interface
	RCP_ROUTE_MAX
} RcpRouteType;

static inline const char *rcpRouteType(RcpRouteType type) {
	switch (type) {
		case RCP_ROUTE_CONNECTED:
			return "C";
		case RCP_ROUTE_CONNECTED_SUBNETS:
			return "C";
		case RCP_ROUTE_STATIC:
			return "S";
		case RCP_ROUTE_RIP:
			return "R";
		case RCP_ROUTE_RIP_NETWORK:
			return "Rn";
		case RCP_ROUTE_BLACKHOLE:
			return "B";
		case RCP_ROUTE_OSPF:
			return "O";
		case RCP_ROUTE_OSPF_IA:
			return "IA";
		case RCP_ROUTE_OSPF_E1:
			return "E1";
		case RCP_ROUTE_OSPF_E2:
			return "E2";
		case RCP_ROUTE_OSPF_BLACKHOLE:
			return "O";
		case RCP_ROUTE_MAX: break;
	}
	return "";
}

int rcpAddRoute(int muxsock, RcpRouteType type, uint32_t ip, uint32_t mask, uint32_t gw, uint32_t metric);
int rcpDelRoute(int muxsock, uint32_t ip, uint32_t mask, uint32_t gw);
int rcpAddECMPRoute(int muxsock, RcpRouteType type, uint32_t ip, uint32_t mask, uint32_t metric, int gw_cnt, uint32_t *gw_ptr);
int rcpDelECMPRoute(int muxsock, RcpRouteType type, uint32_t ip, uint32_t mask, int gw_cnt, uint32_t *gw_ptr);

#ifdef __cplusplus
}
#endif

#endif
