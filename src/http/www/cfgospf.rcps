<!DOCTYPE html><html>
<head><title>OSPF</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<link rel="icon" type="image/png" href="favicon.png"/>
<style>a:link {color:blue} #page {width:700px;background-color:#f0f0ff;border:1px solid;border-radius:10px}
#restResult {background-color:white;border-radius:10px;box-shadow: 10px 10px 5px #888888;margin:3px}</style>
<script type="text/javascript" src="md5.js"></script>
<script type="text/javascript">
function restCmd(cmd) {
	retval = rest(cmd, localStorage.secret);
}

function saveConfig() {
	var cmd = "router ospf && no network && ";
	
	if (idr20.value.length) {
		if (checkIp(idr20.value))
			cmd += "router-id " + idr20.value + " && ";
		else {
			printError("Error: invalid router ID<br/>");
			return;
		}
	}
	
	if (idr2.value.length && idr2h.value.length) {
		if (checkOspfSpfTimer(idr2.value) == 0) {
			printError("Error: invalid SPF timer<br/>");
			addError("A value between 1 and 600 is expected");
			return;
		}
		if (checkOspfSpfHold(idr2h.value) == 0) {
			printError("Error: invalid SPF hold timer<br/>");
			addError("A value between 1 and 300 is expected");
			return;
		}
		cmd += "timers spf " + idr2.value + " " + idr2h.value + " && ";
	}
	else
		cmd += "no timers spf && ";
		
	
	if (idr1.value == "enabled")
		cmd += "default-information originate && ";
	else
		cmd += "no default-information originate && ";
		
	if (idr3.value == "enabled") {
		var metric = 20;
		var tag = 0;
		if (idr4.value.length) {
			if (checkOspfMetric(idr4.value))
				metric = idr4.value;
			else {
				printError("Error: invalid metric value<br/>");
				addError("A value between 0 and 16777214 is expected<br/>");
				return;
			}
		}
		if (idr4t.value.length) {
			if (checkUint32(idr4t.value))
				tag = idr4t.value;
			else {
				printError("Error: invalid tag<br/>");
				addError("A value between 0 and 4294967295 is expected<br/>");
				return;
			}
		}
		cmd += "redistribute connected metric " + metric + " tag " + tag + " && ";
	}
	else
		cmd += "no redistribute connected && ";


	if (idr5.value == "enabled")
		cmd += "redistribute connected loopback " + " && ";
	else
		cmd += "no redistribute connected loopback && ";

	if (idr7.value == "enabled") {
		var metric = 20;
		var tag = 0;
		if (idr8.value.length) {
			if (checkOspfMetric(idr8.value))
				metric = idr8.value;
			else {
				printError("Error: invalid metric value<br/>");
				addError("A value between 0 and 16777214 is expected<br/>");
				return;
			}
		}
		if (idr8t.value.length) {
			if (checkUint32(idr8t.value))
				tag = idr8t.value;
			else {
				printError("Error: invalid tag<br/>");
				addError("A value between 0 and 4294967295 is expected<br/>");
				return;
			}
		}
		cmd += "redistribute static metric " + metric + " tag " + tag + " && ";
	}
	else
		cmd += "no redistribute static && ";

	if (idr9.value == "enabled") {
		var metric = 20;
		var tag = 0;
		if (idr10.value.length) {
			if (checkOspfMetric(idr10.value))
				metric = idr10.value;
			else {
				printError("Error: invalid metric value<br/>");
				addError("A value between 0 and 16777214 is expected<br/>");
				return;
			}
		}
		if (idr10t.value.length) {
			if (checkUint32(idr10t.value))
				tag = idr10t.value;
			else {
				printError("Error: invalid tag<br/>");
				addError("A value between 0 and 4294967295 is expected<br/>");
				return;
			}
		}
		cmd += "redistribute rip metric " + metric + " tag " + tag + " && ";
	}
	else
		cmd += "no redistribute rip && ";


	var ifnet = "";
	var ifname = "";
	var iftype = "";
	var ifenabled = "";
	var ifhello = "";
	var ifdead = "";
	var cmdnetwork = "";
	var cmdif = "";

	var rootnode=document.getElementById("myform")
	var walker=document.createTreeWalker(rootnode, NodeFilter.SHOW_ELEMENT, null, false)
	while (walker.nextNode()) {
		if (walker.currentNode.tagName == "SELECT") {
			if (walker.currentNode.className == "ifenable") {
				id = walker.currentNode.getAttribute("id");
				ifenabled =  document.getElementById(id).value;
			}
		}
		if (walker.currentNode.tagName == "INPUT") {
			if (walker.currentNode.className == "ifnetwork") {
				ifnet = "";
				ifname = "";
				iftype = "";
				ifenabled = "";
				ifhello = "";
				ifdead = "";
				id = walker.currentNode.getAttribute("id");
				elem =  document.getElementById(id).value;
				if (elem.length)
					ifnet = elem;
			}
			if (walker.currentNode.className == "ifname") {
				id = walker.currentNode.getAttribute("id");
				elem =  document.getElementById(id).value;
				if (elem.length)
					ifname = elem;
			}
			if (walker.currentNode.className == "iftype") {
				id = walker.currentNode.getAttribute("id");
				elem =  document.getElementById(id).value;
				if (elem.length)
					iftype = elem;
			}
			if (walker.currentNode.className == "ifarea") {
				id = walker.currentNode.getAttribute("id");
				elem =  document.getElementById(id).value;
				if (elem.length) {
					if (checkUint32(elem))
						ifarea = elem;
					else {
						printError("Error: invalid OSPF area for interface " + ifname + "<br/>");
						addError("A value between 0 and 4294967295 is expected<br/>");
					}
				}
			}
			if (walker.currentNode.className == "ifhello") {
				id = walker.currentNode.getAttribute("id");
				elem =  document.getElementById(id).value;
				if (elem.length) {
					if (checkOspfHello(elem))
						ifhello = elem;
					else {
						printError("Error: invalid OSPF hello interval for interface " + ifname + "<br/>");
						addError("A value between 1 and 65535 is expected<br/>");
					}
				}
			}
			if (walker.currentNode.className == "ifdead") {
				id = walker.currentNode.getAttribute("id");
				elem =  document.getElementById(id).value;
				if (elem.length) {
					if (checkOspfHello(elem))
						ifdead = elem;
					else {
						printError("Error: invalid OSPF dead interval for interface " + ifname + "<br/>");
						addError("A value between 1 and 65535 is expected<br/>");
					}
				}
			
				if (ifenabled == "enabled" && ifarea.length && ifnet.length)
					cmdnetwork += "network " + ifnet + " area " + ifarea + " && ";
				
				if (ifname.length + iftype.length + ifhello.length) {
					cmdif += "interface " + iftype + " " + ifname + " && ";
					cmdif += "ip ospf hello " + ifhello + " && ";
					cmdif += "exit && ";
				}
				if (ifname.length + iftype.length + ifdead.length) {
					cmdif += "interface " + iftype + " " + ifname + " && ";
					cmdif += "ip ospf dead " + ifdead + " && ";
					cmdif += "exit && ";
				}
			
			}
			
		}
	}

	cmd += cmdnetwork + "exit && " + cmdif + " && copy run start";
	restCmd(cmd);
}

function showConfig() {
	var cmd = "show configuration ospf";
	restCmd(cmd);
}


</script>
</head>

<body OnLoad="document.myform.password.focus();">
<div id="page"><br/>
<form name="myform" method="post" id="myform">
<br/>
<table border="0" cellpadding="3" cellspacing="2" align="center" bgcolor="#f0f0ff">

<tr><td colspan="6" align="center" ><br/><h2>OSPF Configuration</h2><br/></td>
</tr>

<tr>
<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td colspan = "4"><i>Note: not all OSPF parameters are supported in this configuration screen.
If such configuration parameters are required, please use the command line interface.<br/><br/></i></td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
</tr>

<tr><td colspan="6" align="center" ><br/></tr>
<?rcps ospf_protocol>

<tr><td colspan="6" align="center" ><br/></tr>

<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td><b>Interface - Network</b></td>
<td><b>Protocol</b></td>
<td><b>Area</b></td>
<td><b>Hello/Dead Interval</b></td>
</tr>

<?rcps ospf_net>

<tr><td colspan="6" align="center" ><br/></tr>

<tr>
<td colspan="6">&nbsp;</td>
</tr><tr>
<td colspan="6" align="center">
<button type="button" onclick="saveConfig()">Save Configuration</button>
<button type="button" onclick="showConfig()">Current Configuration</button>
</td></tr>
</table></form>

<br/><br/>
<div id="restResult"></div>

</div>
</body></html>


